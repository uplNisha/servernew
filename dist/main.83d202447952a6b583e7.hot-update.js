"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "main";
exports.ids = null;
exports.modules = {

/***/ "./src/user/service.ts":
/*!*****************************!*\
  !*** ./src/user/service.ts ***!
  \*****************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nconst model_1 = __importDefault(__webpack_require__(/*! ./model */ \"./src/user/model.ts\"));\r\nconst bcrypt = __webpack_require__(/*! bcrypt */ \"bcrypt\");\r\nconst jwt = __webpack_require__(/*! jsonwebtoken */ \"jsonwebtoken\");\r\nexports[\"default\"] = {\r\n    createuser: (req, res) => {\r\n        return new Promise((resolve, reject) => __awaiter(void 0, void 0, void 0, function* () {\r\n            try {\r\n                bcrypt.hash(req.body.password, 10, (err, hash) => {\r\n                    var _a, _b, _c, _d;\r\n                    if (err) {\r\n                        return res.status(500).json({\r\n                            error: err\r\n                        });\r\n                    }\r\n                    else {\r\n                        const newuser = new model_1.default({\r\n                            name: (_a = req.body) === null || _a === void 0 ? void 0 : _a.name,\r\n                            phone_Number: (_b = req.body) === null || _b === void 0 ? void 0 : _b.phone_Number,\r\n                            email: (_c = req.body) === null || _c === void 0 ? void 0 : _c.email,\r\n                            password: hash,\r\n                            role: (_d = req.body) === null || _d === void 0 ? void 0 : _d.role\r\n                        });\r\n                        const Data = newuser.save();\r\n                        if (!Data) {\r\n                            return reject({\r\n                                status: 400,\r\n                                error: true,\r\n                                code: \"DATA_CREATE_FAILED\",\r\n                                message: \"DATA_CREATE_FAILED\",\r\n                            });\r\n                        }\r\n                        else {\r\n                            return resolve({\r\n                                status: 201,\r\n                                error: false,\r\n                                result: Data,\r\n                                code: \"DATA_CREATED\",\r\n                                message: \"DATA_CREATED\",\r\n                            });\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n            catch (error) {\r\n                return reject({\r\n                    status: 500,\r\n                    error: true,\r\n                    result: error,\r\n                    code: \"INTERNAL_SERVER_ERROR\",\r\n                    message: \"INTERNAL_SERVER_ERROR\",\r\n                });\r\n            }\r\n        }));\r\n    },\r\n    signuser: (req, res) => {\r\n        return new Promise((resolve, reject) => __awaiter(void 0, void 0, void 0, function* () {\r\n            try {\r\n                model_1.default.find({ name: req.body.name })\r\n                    .exec()\r\n                    .then(user => {\r\n                    if (user.length < 1) {\r\n                        return res.status(401).json({\r\n                            message: \"user_not_exist\"\r\n                        });\r\n                    }\r\n                    bcrypt.compare(req.body.password, user[0].password, (err, result) => {\r\n                        if (!result) {\r\n                            return res.status(401).json({\r\n                                message: \"passward_not_match\"\r\n                            });\r\n                        }\r\n                        if (result) {\r\n                            const token = jwt.sign({\r\n                                name: user[0].name,\r\n                                role: user[0].role,\r\n                                phone_Number: user[0].phone_Number,\r\n                                email: user[0].email\r\n                            }, 'this is dummy test', {\r\n                                expiresIn: \"24h\"\r\n                            });\r\n                            res.status(200).json({\r\n                                name: user[0].name,\r\n                                role: user[0].role,\r\n                                phone_Number: user[0].phone_Number,\r\n                                email: user[0].email,\r\n                                token: token\r\n                            });\r\n                        }\r\n                    });\r\n                });\r\n            }\r\n            catch (err) {\r\n                return reject({\r\n                    status: 500,\r\n                    error: true,\r\n                    result: err,\r\n                    code: \"INTERNAL_SERVER_ERROR\",\r\n                    message: \"INTERNAL_SERVER_ERROR\",\r\n                });\r\n            }\r\n        }));\r\n    },\r\n    getuser: (req, res) => {\r\n        return new Promise((resolve, reject) => __awaiter(void 0, void 0, void 0, function* () {\r\n            try {\r\n                model_1.default.find({ name: req.body.name })\r\n                    .exec()\r\n                    .then(user => {\r\n                    if (user.length < 1) {\r\n                        return res.status(401).json({\r\n                            message: \"user_not_exist\"\r\n                        });\r\n                    }\r\n                    bcrypt.compare(req.body.password, user[0].password, (err, result) => {\r\n                        if (!result) {\r\n                            return res.status(401).json({\r\n                                message: \"passward_not_match\"\r\n                            });\r\n                        }\r\n                        if (user[0].role == \"admin\") {\r\n                            const userfind = model_1.default.find({}).sort({ name: 1 });\r\n                            if (userfind) {\r\n                                return resolve({\r\n                                    status: 200,\r\n                                    error: false,\r\n                                    result: userfind,\r\n                                    code: \"DATA_FOUND\",\r\n                                    message: \"DATA_FOUND\",\r\n                                });\r\n                            }\r\n                        }\r\n                        else {\r\n                            return reject({\r\n                                status: 404,\r\n                                error: true,\r\n                                code: \"DATA_NOT_FOUND\",\r\n                                message: \"DATA_NOT_FOUND\",\r\n                            });\r\n                        }\r\n                    });\r\n                });\r\n            }\r\n            catch (err) {\r\n                return reject({\r\n                    status: 500,\r\n                    error: true,\r\n                    result: err,\r\n                    code: \"INTERNAL_SERVER_ERROR\",\r\n                    message: \"INTERNAL_SERVER_ERROR\",\r\n                });\r\n            }\r\n        }));\r\n    },\r\n    getalluser: (req) => {\r\n        return new Promise((resolve, reject) => __awaiter(void 0, void 0, void 0, function* () {\r\n            try {\r\n                const userfind = yield model_1.default.find({}).sort({ name: 1 });\r\n                if ((userfind === null || userfind === void 0 ? void 0 : userfind.length) > 0) {\r\n                    return resolve({\r\n                        status: 200,\r\n                        error: false,\r\n                        result: userfind,\r\n                        code: \"DATA_FOUND\",\r\n                        message: \"DATA_FOUND\",\r\n                    });\r\n                }\r\n                else {\r\n                    return reject({\r\n                        status: 404,\r\n                        error: true,\r\n                        code: \"DATA_NOT_FOUND\",\r\n                        message: \"DATA_NOT_FOUND\",\r\n                    });\r\n                }\r\n            }\r\n            catch (err) {\r\n                return reject({\r\n                    status: 500,\r\n                    error: true,\r\n                    result: err,\r\n                    code: \"INTERNAL_SERVER_ERROR\",\r\n                    message: \"INTERNAL_SERVER_ERROR\",\r\n                });\r\n            }\r\n        }));\r\n    },\r\n    getoneuser: (req) => {\r\n        return new Promise((resolve, reject) => __awaiter(void 0, void 0, void 0, function* () {\r\n            var _a;\r\n            try {\r\n                const userfind = yield model_1.default.findOne({ _id: (_a = req.params) === null || _a === void 0 ? void 0 : _a.userId });\r\n                if (userfind) {\r\n                    return resolve({\r\n                        status: 200,\r\n                        error: false,\r\n                        result: userfind,\r\n                        code: \"DATA_FOUND\",\r\n                        message: \"DATA_FOUND\",\r\n                    });\r\n                }\r\n                else {\r\n                    return reject({\r\n                        status: 404,\r\n                        error: true,\r\n                        code: \"DATA_NOT_FOUND\",\r\n                        message: \"DATA_NOT_FOUND\",\r\n                    });\r\n                }\r\n            }\r\n            catch (err) {\r\n                return reject({\r\n                    status: 500,\r\n                    error: true,\r\n                    result: err,\r\n                    code: \"INTERNAL_SERVER_ERROR\",\r\n                    message: \"INTERNAL_SERVER_ERROR\",\r\n                });\r\n            }\r\n        }));\r\n    },\r\n    getdeleteuser: (req) => {\r\n        return new Promise((resolve, reject) => __awaiter(void 0, void 0, void 0, function* () {\r\n            var _a;\r\n            try {\r\n                const userfind = yield model_1.default.findByIdAndDelete({ _id: (_a = req.params) === null || _a === void 0 ? void 0 : _a.id });\r\n                if (userfind) {\r\n                    return resolve({\r\n                        status: 200,\r\n                        error: false,\r\n                        result: userfind,\r\n                        code: \"DATA_FOUND\",\r\n                        message: \"DATA_DELETED\",\r\n                    });\r\n                }\r\n                else {\r\n                    return reject({\r\n                        status: 404,\r\n                        error: true,\r\n                        code: \"DATA_NOT_FOUND\",\r\n                        message: \"DATA_NOT_FOUND\",\r\n                    });\r\n                }\r\n            }\r\n            catch (err) {\r\n                return reject({\r\n                    status: 500,\r\n                    error: true,\r\n                    result: err,\r\n                    code: \"INTERNAL_SERVER_ERROR\",\r\n                    message: \"INTERNAL_SERVER_ERROR\",\r\n                });\r\n            }\r\n        }));\r\n    },\r\n    getupdateuser: (req) => {\r\n        return new Promise((resolve, reject) => __awaiter(void 0, void 0, void 0, function* () {\r\n            var _a;\r\n            try {\r\n                const userfind = yield model_1.default.findByIdAndUpdate((_a = req.params) === null || _a === void 0 ? void 0 : _a.id, req.body, {\r\n                    new: true\r\n                });\r\n                if (userfind) {\r\n                    return resolve({\r\n                        status: 200,\r\n                        error: false,\r\n                        result: userfind,\r\n                        code: \"DATA_FOUND\",\r\n                        message: \"DATA_DELETED\",\r\n                    });\r\n                }\r\n                else {\r\n                    return reject({\r\n                        status: 404,\r\n                        error: true,\r\n                        code: \"DATA_NOT_FOUND\",\r\n                        message: \"DATA_NOT_FOUND\",\r\n                    });\r\n                }\r\n            }\r\n            catch (err) {\r\n                return reject({\r\n                    status: 500,\r\n                    error: true,\r\n                    result: err,\r\n                    code: \"INTERNAL_SERVER_ERROR\",\r\n                    message: \"INTERNAL_SERVER_ERROR\",\r\n                });\r\n            }\r\n        }));\r\n    }\r\n};\r\n\n\n//# sourceURL=webpack://servernew/./src/user/service.ts?");

/***/ })

};
exports.runtime =
/******/ function(__webpack_require__) { // webpackRuntimeModules
/******/ /* webpack/runtime/getFullHash */
/******/ (() => {
/******/ 	__webpack_require__.h = () => ("89c06fe0b7d07f8eb558")
/******/ })();
/******/ 
/******/ }
;