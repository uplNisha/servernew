"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "main";
exports.ids = null;
exports.modules = {

/***/ "./src/student/service.ts":
/*!********************************!*\
  !*** ./src/student/service.ts ***!
  \********************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nconst model_1 = __importDefault(__webpack_require__(/*! ./model */ \"./src/student/model.ts\"));\r\nexports[\"default\"] = {\r\n    createstudent: (req) => {\r\n        return new Promise((resolve, reject) => __awaiter(void 0, void 0, void 0, function* () {\r\n            var _a, _b, _c, _d;\r\n            try {\r\n                const newStudent = new model_1.default({\r\n                    name: (_a = req.body) === null || _a === void 0 ? void 0 : _a.name,\r\n                    branch: (_b = req.body) === null || _b === void 0 ? void 0 : _b.branch,\r\n                    email: (_c = req.body) === null || _c === void 0 ? void 0 : _c.email,\r\n                    password: (_d = req.body) === null || _d === void 0 ? void 0 : _d.password,\r\n                    addmissionDate: new Date().toISOString(),\r\n                });\r\n                const Data = yield newStudent.save();\r\n                if (!Data) {\r\n                    return reject({\r\n                        status: 400,\r\n                        error: true,\r\n                        code: \"DATA_CREATE_FAILED\",\r\n                        message: \"DATA_CREATE_FAILED\",\r\n                    });\r\n                }\r\n                else {\r\n                    return resolve({\r\n                        status: 201,\r\n                        error: false,\r\n                        result: Data,\r\n                        code: \"DATA_CREATED\",\r\n                        message: \"DATA_CREATED\",\r\n                    });\r\n                }\r\n            }\r\n            catch (error) {\r\n                return reject({\r\n                    status: 500,\r\n                    error: true,\r\n                    result: error,\r\n                    code: \"INTERNAL_SERVER_ERROR\",\r\n                    message: \"INTERNAL_SERVER_ERROR\",\r\n                });\r\n            }\r\n        }));\r\n    },\r\n    // insertstudent: (req: any) => {\r\n    //     return new Promise(async (resolve, reject) => {\r\n    //         try {\r\n    //             const newStudent = studentModel.insertOne({name: \"Akshay\", branch: \"CSE\"});\r\n    //             const Data = await newStudent.save();\r\n    //             if (!Data) {\r\n    //                 return reject({\r\n    //                     status: 400,\r\n    //                     error: true,\r\n    //                     code: \"DATA_CREATE_FAILED\",\r\n    //                     message: \"DATA_CREATE_FAILED\",\r\n    //                 })\r\n    //             }\r\n    //             else {\r\n    //                 return resolve({\r\n    //                     status: 201,\r\n    //                     error: false,\r\n    //                     result: Data,\r\n    //                     code: \"DATA_CREATED\",\r\n    //                     message: \"DATA_CREATED\",\r\n    //                 })\r\n    //             }\r\n    //         }\r\n    //         catch (error) {\r\n    //             return reject({\r\n    //                 status: 500,\r\n    //                 error: true,\r\n    //                 result: error,\r\n    //                 code: \"INTERNAL_SERVER_ERROR\",\r\n    //                 message: \"INTERNAL_SERVER_ERROR\",\r\n    //             })\r\n    //         }\r\n    //     })\r\n    // },\r\n    getstudent: (req) => {\r\n        return new Promise((resolve, reject) => __awaiter(void 0, void 0, void 0, function* () {\r\n            try {\r\n                const studentfind = yield model_1.default.find({}, { name: 1, email: 1, _id: 0 });\r\n                if ((studentfind === null || studentfind === void 0 ? void 0 : studentfind.length) > 0) {\r\n                    return resolve({\r\n                        status: 200,\r\n                        error: false,\r\n                        result: studentfind,\r\n                        code: \"DATA_FOUND\",\r\n                        message: \"DATA_FOUND\",\r\n                    });\r\n                }\r\n                else {\r\n                    return reject({\r\n                        status: 404,\r\n                        error: true,\r\n                        code: \"DATA_NOT_FOUND\",\r\n                        message: \"DATA_NOT_FOUND\",\r\n                    });\r\n                }\r\n            }\r\n            catch (err) {\r\n                return reject({\r\n                    status: 500,\r\n                    error: true,\r\n                    result: err,\r\n                    code: \"INTERNAL_SERVER_ERROR\",\r\n                    message: \"INTERNAL_SERVER_ERROR\",\r\n                });\r\n            }\r\n        }));\r\n    },\r\n    getmatchstudent: (req) => {\r\n        return new Promise((resolve, reject) => __awaiter(void 0, void 0, void 0, function* () {\r\n            try {\r\n                const studentfind = yield model_1.default.aggregate([{ $match: { branch: \"EC\" } }, { $sort: { addmissionDate: -1 } }]);\r\n                if ((studentfind === null || studentfind === void 0 ? void 0 : studentfind.length) > 0) {\r\n                    return resolve({\r\n                        status: 200,\r\n                        error: false,\r\n                        result: studentfind,\r\n                        code: \"DATA_FOUND\",\r\n                        message: \"DATA_FOUND\",\r\n                    });\r\n                }\r\n                else {\r\n                    return reject({\r\n                        status: 200,\r\n                        error: true,\r\n                        code: \"DATA_NOT_FOUND\",\r\n                        message: \"DATA_NOT_FOUND\",\r\n                    });\r\n                }\r\n            }\r\n            catch (err) {\r\n                return reject({\r\n                    status: 500,\r\n                    error: true,\r\n                    result: err,\r\n                    code: \"INTERNAL_SERVER_ERROR\",\r\n                    message: \"INTERNAL_SERVER_ERROR\",\r\n                });\r\n            }\r\n        }));\r\n    },\r\n    getonestudent: (req) => {\r\n        return new Promise((resolve, reject) => __awaiter(void 0, void 0, void 0, function* () {\r\n            var _a;\r\n            try {\r\n                // const studentfind=await studentModel.find({ \"_id\": \"638ee586f05937c6fdd41552\"})\r\n                const studentfind = yield model_1.default.findOne({ _id: (_a = req.params) === null || _a === void 0 ? void 0 : _a.studentId });\r\n                if (studentfind) {\r\n                    return resolve({\r\n                        status: 200,\r\n                        error: false,\r\n                        result: studentfind,\r\n                        code: \"DATA_FOUND\",\r\n                        message: \"DATA_FOUND\",\r\n                    });\r\n                }\r\n                else {\r\n                    return reject({\r\n                        status: 404,\r\n                        error: true,\r\n                        code: \"DATA_NOT_FOUND\",\r\n                        message: \"DATA_NOT_FOUND\",\r\n                    });\r\n                }\r\n            }\r\n            catch (err) {\r\n                return reject({\r\n                    status: 500,\r\n                    error: true,\r\n                    result: err,\r\n                    code: \"INTERNAL_SERVER_ERROR\",\r\n                    message: \"INTERNAL_SERVER_ERROR\",\r\n                });\r\n            }\r\n        }));\r\n    },\r\n    getdeletestudent: (req) => {\r\n        return new Promise((resolve, reject) => __awaiter(void 0, void 0, void 0, function* () {\r\n            var _a;\r\n            try {\r\n                // const studentfind=await studentModel.find({ \"_id\": \"638ee586f05937c6fdd41552\"})\r\n                const studentfind = yield model_1.default.findByIdAndDelete({ _id: (_a = req.params) === null || _a === void 0 ? void 0 : _a.id });\r\n                if (studentfind) {\r\n                    return resolve({\r\n                        status: 200,\r\n                        error: false,\r\n                        result: studentfind,\r\n                        code: \"DATA_FOUND\",\r\n                        message: \"DATA_DELETED\",\r\n                    });\r\n                }\r\n                else {\r\n                    return reject({\r\n                        status: 404,\r\n                        error: true,\r\n                        code: \"DATA_NOT_FOUND\",\r\n                        message: \"DATA_NOT_FOUND\",\r\n                    });\r\n                }\r\n            }\r\n            catch (err) {\r\n                return reject({\r\n                    status: 500,\r\n                    error: true,\r\n                    result: err,\r\n                    code: \"INTERNAL_SERVER_ERROR\",\r\n                    message: \"INTERNAL_SERVER_ERROR\",\r\n                });\r\n            }\r\n        }));\r\n    },\r\n    getupdatestudent: (req) => {\r\n        return new Promise((resolve, reject) => __awaiter(void 0, void 0, void 0, function* () {\r\n            var _a;\r\n            try {\r\n                const studentfind = yield model_1.default.findByIdAndUpdate((_a = req.params) === null || _a === void 0 ? void 0 : _a.id, req.body, {\r\n                    new: true\r\n                });\r\n                if (studentfind) {\r\n                    return resolve({\r\n                        status: 200,\r\n                        error: false,\r\n                        result: studentfind,\r\n                        code: \"DATA_FOUND\",\r\n                        message: \"DATA_DELETED\",\r\n                    });\r\n                }\r\n                else {\r\n                    return reject({\r\n                        status: 404,\r\n                        error: true,\r\n                        code: \"DATA_NOT_FOUND\",\r\n                        message: \"DATA_NOT_FOUND\",\r\n                    });\r\n                }\r\n            }\r\n            catch (err) {\r\n                return reject({\r\n                    status: 500,\r\n                    error: true,\r\n                    result: err,\r\n                    code: \"INTERNAL_SERVER_ERROR\",\r\n                    message: \"INTERNAL_SERVER_ERROR\",\r\n                });\r\n            }\r\n        }));\r\n    }\r\n};\r\n\n\n//# sourceURL=webpack://servernew/./src/student/service.ts?");

/***/ })

};
exports.runtime =
/******/ function(__webpack_require__) { // webpackRuntimeModules
/******/ /* webpack/runtime/getFullHash */
/******/ (() => {
/******/ 	__webpack_require__.h = () => ("5142a90fdaf34d0fd036")
/******/ })();
/******/ 
/******/ }
;